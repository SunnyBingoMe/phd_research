### Mon Nov  7 11:38:34 PST 2016

`createRegistrationCode()` in RCIndex can look through C++ source and
generate code. So I need to get this installed and try working with it.

Interesting quote on page 10:

> The R registration mechanism doesn’t currently permit the programmer to
> specify which type of R object is expected for each parameter in a
> .Call() routine, e.g., an integer or numeric vector, or a function or a
> list. The RCIndex functionality does, however, allow us to infer this by
> analyzing the code within a routine and determining how it is being
> accessed. This could be added to the registration information and allow R
> to perform run-time checks or coercion to the appropriate types in call
> to the routine.

So does the current RCIndex parse the bodies or not? Reading further it
seems that it does.

There is a lot of material here on navigating the tree. Reads like a
package vignette. Idea- use variables in function closures to update state
when writing cursor visitor functions.

Side note - A C macro is used to expand code in a pre processing step.

Not many academic references here.

Application 4.2 for Rdyncall seems to be describing how to build a tool for
generating the wrapper code. Is this the thing for me to build?

Looks like comparing `=` strings is actually how to check for assignment.
Seems like it would be more programmatic. See [Stack
Overflow](http://stackoverflow.com/questions/23227812/get-operator-type-for-cxcursor-binaryoperator).

> Given these basic bindings, we plan to develop additional high-level
> functionality to process different aspects of native code.

This is probably what I should start doing :)

TODO - read through articles in bib file, along with papers that cite them.

### Fri Oct  7 15:24:01 PDT 2016

Reading up on Duncan's RCIndex and RCodeGen packages:
https://github.com/duncantl/RCodeGen

RCodeGen package can generate R wrapper's to C code. How does this relate
to [SWIG](http://www.swig.org/)? SWIG appears to do it more generally.

## Notes on paper from RCIndex

RCUDA is mentioned as an example of automatically generating documentation.
I can't tell if it generates code or documentation- just looks like a bunch
of string parsing:
https://github.com/duncantl/RCUDA/blob/master/TU/clang.R

The __Software as Data__ section describes some interesting ways to do code
analysis.

Nick said something along the lines of "It would be useful to
programmatically generate bindings for 90% of the functionality of a C
package that you're interfacing to". This makes sense. But it sounds like
this can already be done with these packages? Side note- Learning more about C and C++
would be nice, and tackling this would probably force me to learn more of
these.

__Translation Unit__ is a C source file after it has been preprocessed.
This includes recursive expansion of headers (`#include`).

__Cursor__ node in a parse tree

__Token__ Tokenizing step breaks text of code up like `f(x)` into `["f",
"(", "x", ")"]`. Each of these atomic strings is a token. Tokenizing happens before parsing.

Parsing R's `memory.c`: I would have thought the adjacency matrix would
have used R's `outer()`. Not important though.

Example of generating registration code:

```
rg = createRegistrationCode("~/GitWorkingArea/FastCSVSample/src")
cat("#include <R_ext/Rdynload.h>", rg, sep = "\n", file = "init.c")
```

Regarding argument types- R doesn't let one specify. It states:

> This could be added to the registration information and allow R to
> perform run-time checks or coercion to the appropriate types in call to
> the routine.

This is interesting. Presumably the result is more robust code. If one does
this more generally it would be nice to have coercion happen in R before it
calls into C and crashes.

Footnote on page 11 says: _"The code generation options are not relevant as
we are not generating code, only parsing it"_. But why wouldn't we generate
it using these tools? Would this approach be any different than the LLVM
compiler?


### installation notes for RClangSimple

After I install the dependencies clang, llvm, libclang-dev and the R
package dependencies I run into this:

```
Error in eval(expr, envir, enclos) : object 'CXType_Int' not found
Error : unable to load R code in package ‘RCIndex’
ERROR: lazy loading failed for package ‘RCIndex’
* removing ‘/usr/local/lib/R/site-library/RCIndex’

```

This appears to be a problem with the order in which the files are sourced?

Nope, problem was that none of the `enumDefs` files were sourced because my
upgrade got the most recent version of `clang`, 3.8. I need to be using
3.7 for this.

Ok, I did some dirty hacking to switch my `clang` just on my bashrc , and now when I run

```
R CMD INSTALL --preclean
```

I see compilation and then:

```
Warning in clangVersionNum(libclangVersion_Install) :
  NAs introduced by coercion
Warning in clangVersionNum(libclangVersion_Install) :
  NAs introduced by coercion
Error in eval(expr, envir, enclos) : object 'CXType_Int' not found
Error : unable to load R code in package ‘RCIndex’
```

Looking through more notes running 

```
R CMD INSTALL --clean
```

I see that it's still using all the 3.8 versions. Which is not what I
wanted. What if I try uninstalling clang from apt to remove the
configuration files?

Current install:

```

$ apt-cache policy libclang-dev
libclang-dev:
  Installed: 1:3.8-33ubuntu3.1
  Candidate: 1:3.8-33ubuntu3.1
  Version table:
 *** 1:3.8-33ubuntu3.1 500
        500 http://us.archive.ubuntu.com/ubuntu xenial-updates/universe amd64 Packages
        100 /var/lib/dpkg/status
     1:3.8-33ubuntu3 500
        500 http://us.archive.ubuntu.com/ubuntu xenial/universe amd64 Packages

```


```

sudo apt-get remove --purge libclang-dev

sudo apt-get remove --purge llvm

sudo apt-get remove --purge clang

```

Now `clang` is off my `$PATH`.

TODO: tomorrow, start frash, attempt install, update repo with correct
install instructions.
